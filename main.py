from flask import Flask,render_template,request,session,redirect,url_for,flash
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime,timedelta
from flask_mail import Mail
from werkzeug.utils import secure_filename
from werkzeug.security import generate_password_hash,check_password_hash
from itsdangerous import URLSafeTimedSerializer,SignatureExpired,BadSignature
import json
import math
import os
# import secrets # used once to generate secret key

# It can be used for configuration for example database URIs are written here so that it can be easily changed when project is deployed on a server.
with open("config.json","r") as c:
    params = json.loads(c.read())["params"]

app = Flask(__name__)

app.secret_key = params["secret_key"]

app.config["PERMANENT_SESSION_LIFETIME"] = timedelta(days=7)

app.config["UPLOAD_FOLDR"] = params["upload_location"]

app.config.update(
    MAIL_SERVER = "smtp.gmail.com",
    MAIL_PORT = "465",
    MAIL_USE_SSL = True,
    MAIL_USERNAME = params["gmail_user"],
    MAIL_PASSWORD = params["email_password"]
)

mail = Mail(app)

# app.config["SQLALCHEMY_DATABASE_URI"] = 'mysql://root:@localhost/learningflask'
if params["local_server"]:
    app.config["SQLALCHEMY_DATABASE_URI"] = params["local_uri"]
else:    
    app.config["SQLALCHEMY_DATABASE_URI"] = params["prod_uri"]

db = SQLAlchemy(app)

s = URLSafeTimedSerializer(app.secret_key)

class Contacts(db.Model):
    sno = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80), unique=False, nullable=False)
    phone_number = db.Column(db.String(15), unique=False, nullable=False)
    message = db.Column(db.String(250), unique=False, nullable=False)
    date = db.Column(db.String(15), unique=False,nullable=True)
    email = db.Column(db.String(25), unique=False, nullable=False)

    def __init__(self, name, phone_number,  email, message, date):
        self.name = name
        self.email = email
        self.phone_number = phone_number
        self.message = message
        self.date = date

    # def __repr__(self):
    #     return '<User %r>' % self.username

class Posts(db.Model):
    sno = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(80), unique=False, nullable=False)
    tagline = db.Column(db.String(80), unique=False, nullable=False)
    slug = db.Column(db.String(80), unique=False, nullable=False)
    content = db.Column(db.String(1000), unique=False, nullable=False)
    img_file = db.Column(db.String(200), unique=False, nullable=False)
    date = db.Column(db.String(15), unique=False,nullable=True)
    name = db.Column(db.String(50),unique=False,nullable=True)
    email = db.Column(db.String(50),unique=False,nullable=True)

class User(db.Model):
    sno = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80), unique=False, nullable=False)
    email = db.Column(db.String(80), unique=True, nullable=False)
    date = db.Column(db.String(80), unique=False, nullable=False)
    password = db.Column(db.String(150), unique=False, nullable=False)
    verify_status = db.Column(db.Boolean, unique=False, nullable=False)
    profile_photo = db.Column(db.String(200), unique=False, nullable=False)

def generate_token(email):
    return s.dumps(email,salt="email-confirm")

def send_verification_mail(user):
    token = generate_token(user.email)
    verify_url = url_for("verify_email_token",token=token,_external=True)
    mail.send_message(subject=f"Verify your email for {params["blog_name"]}",sender=params["gmail_user"],recipients=[user.email],body=f"Hi {user.name}, Click the link below to verify your email.\n {verify_url}\n\n (Note:- Do not reply because this mail is generated by computer.)")

def check_upload_type(filename):
    allowed_extentions = {"jpg","jpeg","png","gif"}
    
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in allowed_extentions

def upload_file(label_name):

    file = request.files[label_name]
    file.seek(0)
    if file and check_upload_type(file.filename):
        # file.save(os.path.join(app.config["UPLOAD_FOLDR"], secure_filename(file.filename)))
        filename = f"{session['name'].replace(" ","")}_{datetime.now().strftime("%y-%m-%d-%H%M%S")}_{secure_filename(file.filename)}"
        file.save(os.path.join(app.config["UPLOAD_FOLDR"], filename))
        return filename
    else:
        filename = "home-bg.jpg"
        return filename


@app.route("/verify/<token>")

def verify_email_token(token):
    try:
        email = s.loads(token,salt="email-confirm",max_age=int(params["max_token_age"]))   # for 24 hours
    # except Exception:
    #     flash("Verification link is invalid or expired.\nplease fill your sign up form again and get a new verification mail.","danger")
    #     return redirect(url_for("register"))

    except SignatureExpired:
        flash("Verification link has expired. Please register again.", "warning")
        return redirect(url_for("register"))
    except BadSignature:
        flash("Invalid verification link.", "danger")
        return redirect(url_for("register"))


    update_user = User.query.filter_by(email=email).first()
    if update_user:
        update_user.verify_status = True
        db.session.commit()
        flash("Email verified successfully. Now you can sign in.","success")
    else:
        flash("User not found","danger")

    return redirect(url_for("dashboard"))        


@app.route("/reset-password/<token>",methods=["GET","POST"])

def reset_password(token):
    try:
        email = s.loads(token,salt="password-reset",max_age=int(params["max_reset_token_age"]))   # for 1 hours

    except SignatureExpired:
        flash("Reset link has expired. Please try again.", "warning")
        return redirect(url_for("forget_password"))
    except BadSignature:
        flash("Invalid reset link.", "danger")
        return redirect(url_for("forget_password"))
    
    if request.method == 'POST':
        password = request.form.get("password")
        confirm = request.form.get("confirm")

        if password == confirm:
            user_update = User.query.filter_by(email=email).first()
            user_update.password = generate_password_hash(password,method="scrypt")
            db.session.commit()
            flash("Password updated successfully","success")
            return redirect(url_for("dashboard"))
        else:
            flash("Passwords do not match, please re-enter the password and confirm it.","danger")

    return render_template("reset_password.html",params=params,token=token,logged_in=session.get("logged_in", False))   

@app.route("/")

def home():
    posts = Posts.query.filter_by().all()[-1::-1]
    total_posts = len(posts)

    last = math.ceil(len(posts)/int(params["no_of_post"]))

    page = request.args.get("page")

    if (not str(page).isnumeric()):
        page = 1
    page = int(page)
    posts = posts[(page-1)*int(params["no_of_post"]): (page-1)*int(params["no_of_post"])+int(params["no_of_post"])]    
    
    if (page == 1):
        new = "#"
        old = "/?page="+ str(page+1) 

    elif (page == last):
        new = "/?page="+ str(page-1)
        old = "#"

    else:
        new = "/?page="+ str(page-1)
        old = "/?page="+ str(page+1) 
        

    # posts = Posts.query.filter_by().all()[0:int(params["no_of_post"])]
    return render_template("index.html",params=params,posts=posts,logged_in=session.get("logged_in", False),new=new,old=old,no_of_post=int(params["no_of_post"]),total_posts=total_posts)


    
@app.route("/forget_password",methods=["GET","POST"])

def forget_password():
    if "user" in session:
        return redirect(url_for("dashboard"))
    else:
        if request.method == "POST":
            email = request.form.get("email")
            check_user = User.query.filter_by(email=email).first()
            if check_user:
                token = s.dumps(email,salt="password-reset")
                reset_link = url_for("reset_password",token=token,_external=True)
                mail.send_message(subject=f"Reset your password for {params["blog_name"]}",sender=params["gmail_user"],recipients=[email],body=f"Hi {check_user.name}, Click the link below to reset your password.\n {reset_link}\n\n (Note:- Do not reply because this mail is generated by computer.)")
                flash("Reset link sent to your email.","success")

            else:
                flash("Email not found.","danger")
        return render_template("forget_password.html",params=params,logged_in=session.get("logged_in", False))


@app.route("/about")

def about():
    return render_template("about.html",params=params,logged_in=session.get("logged_in", False))

@app.route("/post/<string:post_slug>",methods=["GET"])

def post_route(post_slug):
    if "user" in session:
        post = Posts.query.filter_by(slug=post_slug).first()
        return render_template("post.html",params=params,post=post,logged_in=session.get("logged_in", False))
    else:
        return redirect(url_for("dashboard"))


@app.route("/register")

def register():
    if "user" in session:
        return redirect(url_for("dashboard")) 
    else:
        return render_template("register.html",params=params,logged_in=session.get("logged_in", False))   
        
    

@app.route("/dashboard",methods=["GET","POST"])

def dashboard():
    if "user" in session:
          user_photo = User.query.filter_by(name=session["name"],email=session["user"]).first()
          posts = Posts.query.filter_by(name=session["name"],email=session["user"]).all()
          return render_template("dashboard.html",params=params,posts=posts,logged_in=session.get("logged_in", False),user_photo=user_photo)
    
    elif request.method == "POST":
          action = request.form.get("action")
          
          if action == "login":
            useremail = request.form.get("email")
            password = request.form.get("password")
 
            check_user_info = User.query.filter_by(email=useremail).first()

            # if useremail == params["admin_user"] and password == params["admin_password"]:
            if check_user_info and check_password_hash(check_user_info.password, password):
                if check_user_info.verify_status:
                    session.permanent = True
                    session["user"] = check_user_info.email
                    session["name"] = check_user_info.name
                    session["logged_in"] = True
                    user_photo = User.query.filter_by(name=session["name"],email=session["user"]).first()
                    posts = Posts.query.filter_by(name=session["name"],email=session["user"]).all()
                    return render_template("dashboard.html",params=params,posts=posts,logged_in=session.get("logged_in", False),user_photo=user_photo)  

                else:
                    flash("Please verify your registered email.","warning")  
                    return render_template("login.html",params=params,logged_in=session.get("logged_in", False)) 
            else:
                flash("Invalid email or password, please try again.","danger")  
                return render_template("login.html",params=params,logged_in=session.get("logged_in", False))
            

          elif action == "register":
              username = request.form.get("username")
              email = request.form.get("email")
              password = request.form.get("password")
              confirm = request.form.get("confirm")
              
              if not all([username,email,password,confirm]):  
                flash("Please fill out all the fields","danger")    
                return redirect(url_for("register"))
                  
              if password != confirm:
                  flash("Passwords do not match, please re-enter the password and confirm it.","danger")    
                  return redirect(url_for("register"))  
              elif "@" not in email or "." not in email:
                  flash("Enter valid email","danger")    
                  return redirect(url_for("register"))  
              else:
                  user_check = User.query.filter_by(email=email).first()
                  if not user_check:
                      user = User(name=username,email=email,password=generate_password_hash(password,method="scrypt"),date=datetime.now(),verify_status=False,profile_photo="home-bg.jpg")
                      db.session.add(user)
                      db.session.commit()
                      send_verification_mail(user)
                      flash("Your account is created, Please verify your email using verification email.","success")  
                      return redirect(url_for("register"))
                  
                  elif not user_check.verify_status:
                      send_verification_mail(user_check)
                      flash("Your account was already created, Please verify your email using verification email.","success")
                      return redirect(url_for("register"))

                  else:
                      flash("User already exist. please sign in to continue.","danger")
                      return redirect(url_for("dashboard"))  

                  
                  
                     
                     
                #   else:
                #       flash("User already exist.","danger")
                #       return redirect(url_for("register"))
              
                                  

              
    else:
        return render_template("login.html",params=params,logged_in=session.get("logged_in", False))

@app.route("/edit/<string:sno>",methods=["GET","POST"])

def edit(sno):
    if "user" in session:

        if sno == "0":
            check_post = True
        else:
            check_post = Posts.query.filter_by(sno=sno,name=session["name"],email=session["user"]).first()

        if request.method == "POST":
            title = request.form.get("title")
            tagline = request.form.get("tagline")
            slug = request.form.get("slug").replace(" ","-") + f"{title+tagline}".replace(" ","-") + datetime.now().strftime("%y-%m-%d-%H%M%S")
            if len(slug) <= 80:
                pass
            else:
                slug = slug[0:80] 
            content = request.form.get("content")
            # img_file = request.form.get("img_file")
            img_file = upload_file("img_file")

            if sno == "0":
                post = Posts(title=title,tagline=tagline,slug=slug,content=content,img_file=img_file,date=datetime.now(),name=session["name"],email=session["user"])
                db.session.add(post)
                db.session.commit()

                # return render_template("edit.html",params=params,sno=sno)
                return redirect(url_for(("dashboard")))
            else: 
                post = Posts.query.filter_by(sno=sno,name=session["name"],email=session["user"]).first()
                post.title = title
                post.tagline = tagline
                slug = slug.replace(" ", "") + f"{title+tagline}".replace(" ","") + datetime.now().strftime("%y-%m-%d-%H%M%S")
                if len(slug) <= 80:
                    post.slug = slug
                else:
                    post.slug = slug[0:80]    

                post.content = content

                img_file1 = request.files["img_file"]
                if img_file1 and check_upload_type(img_file1.filename):
                    img_file1.seek(0)
                    filename = f"{session['name'].replace(" ","")}_{datetime.now().strftime("%y-%m-%d-%H%M%S")}_{secure_filename(img_file1.filename)}"
                    img_file1.save(os.path.join(app.config["UPLOAD_FOLDR"], filename))
                    post.img_file = filename   


                db.session.commit()

                # return render_template("edit.html",params=params,sno=sno)
                return redirect(url_for(("dashboard")))
            
        if check_post:    
            post = Posts.query.filter_by(sno=sno).first()      
            return render_template("edit.html",params=params,sno=sno,post=post,logged_in=session.get("logged_in", False)) 
        else:
            return redirect(url_for("dashboard"))
    return redirect(url_for("dashboard"))  

@app.route("/delete/<string:sno>")

def delete(sno):
    if "user" in session:
        post = Posts.query.filter_by(sno=sno).first()
        db.session.delete(post)
        db.session.commit()
        return redirect(url_for("dashboard"))
    else:
        return redirect(url_for("dashboard"))


@app.route("/uploader",methods=["GET","POST"])

def uploader():
    if "user" in session:
        if request.method == 'POST':
            entry_user = User.query.filter_by(name=session["name"],email=session["user"]).first()
            action = request.form.get("action")
            if action == "add":
                file = request.files["profile"]
                file.seek(0)
                # file.save(os.path.join(app.config["UPLOAD_FOLDR"], secure_filename(file.filename)))

                if file and check_upload_type(file):
                    try:
                        if entry_user.profile_photo and entry_user.profile_photo != "home-bg.jpg":
                            os.remove(os.path.join(app.config["UPLOAD_FOLDR"],entry_user.profile_photo))
                    except Exception as e:
                        pass

                    filename = f"{session['user']}_{secure_filename(file.filename)}"
                    file.save(os.path.join(app.config["UPLOAD_FOLDR"], filename))  
                    entry_user.profile_photo = filename

            elif action == "remove":
                try:
                   if entry_user.profile_photo and entry_user.profile_photo != "home-bg.jpg":
                       os.remove(os.path.join(app.config["UPLOAD_FOLDR"],entry_user.profile_photo))
                except Exception as e:
                    pass

                entry_user.profile_photo = "home-bg.jpg"

            db.session.commit()     

            return redirect(url_for("dashboard"))
        return redirect(url_for("dashboard"))
    else:
        return redirect(url_for("dashboard"))

@app.route("/user_profile/<string:sno>/<string:name>")

def user_profile(sno,name):
    post_data = Posts.query.filter_by(sno=sno,name=name).first()

    if post_data:
        post_by_user = Posts.query.filter_by(name=name,email=post_data.email).all()[-1::-1]

        total_posts = len(post_by_user)

        last = math.ceil(len(post_by_user)/int(params["no_of_post"]))

        page = request.args.get("page")

        if (not str(page).isnumeric()):
            page = 1
        page = int(page)
        post_by_user = post_by_user[(page-1)*int(params["no_of_post"]): (page-1)*int(params["no_of_post"])+int(params["no_of_post"])]    
        
        if (page == 1):
            new = "#"
            old = f"/user_profile/{sno}/{name}?page="+ str(page+1) 

        elif (page == last):
            new = f"/user_profile/{sno}/{name}?page="+ str(page-1)
            old = "#"

        else:
            new = f"/user_profile/{sno}/{name}?page="+ str(page-1)
            old = f"/user_profile/{sno}/{name}?page="+ str(page+1)        

        
        user_data = User.query.filter_by(name=name,email=post_data.email).first()

        return render_template("user_profile.html",params=params,logged_in=session.get("logged_in", False),user_data=user_data,post_by_user=post_by_user,new=new,old=old,total_posts=total_posts,no_of_post=len(params["no_of_post"]))
    else:
        # return redirect(url_for("error2"))
        return redirect(url_for("error2"))


@app.route("/my_user_profile")

def my_user_profile():
    if "user" in session:
        post_by_user = Posts.query.filter_by(name=session["name"],email=session["user"]).all()[-1::-1]

        total_posts = len(post_by_user)
        
        last = math.ceil(len(post_by_user)/int(params["no_of_post"]))

        page = request.args.get("page")

        if (not str(page).isnumeric()):
            page = 1
        page = int(page)
        post_by_user = post_by_user[(page-1)*int(params["no_of_post"]): (page-1)*int(params["no_of_post"])+int(params["no_of_post"])]    
        
        if (page == 1):
            new = "#"
            old = "/my_user_profile?page="+ str(page+1) 

        elif (page == last):
            new = "/my_user_profile?page="+ str(page-1)
            old = "#"

        else:
            new = "/my_user_profile?page="+ str(page-1)
            old = "/my_user_profile?page="+ str(page+1)                                                                                      
                                                                                                
        user_data = User.query.filter_by(name=session["name"],email=session["user"]).first()
        
        return render_template("user_profile.html",params=params,logged_in=session.get("logged_in", False),user_data=user_data,post_by_user=post_by_user,new=new,old=old,total_posts=total_posts,no_of_post=len(params["no_of_post"]))
    else:
        return redirect(url_for("dashboard"))
    

@app.route("/contact",methods=["GET","POST"])

def contact():
    if request.method == "POST":
        # Add entry to the database
        name = request.form.get("name")
        email = request.form.get("email")
        phone = request.form.get("phone")
        message = request.form.get("message")

        if not all([name,email,phone,message]):
            flash("Please fill out all the fields.","danger")
        
        elif "user" in session:
            entry = Contacts(name=name,phone_number=phone,message=message,email=email,date=datetime.now())
            db.session.add(entry)
            db.session.commit()
            mail.send_message("New message from "+ name,sender=email,recipients=[params["gmail_user"]],body=message+"\n"+ phone)    
            flash("Thanks for contacting us, we will soon respond back to you.","success")
            return render_template("contact.html",params=params,logged_in=session.get("logged_in", False))
        else:
            flash("Sign in before sending message.","info")
            return redirect(url_for("dashboard"))
        
    return render_template("contact.html",params=params,logged_in=session.get("logged_in", False))


@app.errorhandler(400)

def error1(e):
    return render_template("error_handler.html",error_type=400,params=params,logged_in=session.get("logged_in", False)),400

@app.errorhandler(404)

def error2(e):
    return render_template("error_handler.html",error_type=404,params=params,logged_in=session.get("logged_in", False)),404

@app.errorhandler(500)

def error3(e):
    return render_template("error_handler.html",error_type=500,params=params,logged_in=session.get("logged_in", False)),500


@app.route("/logout")

def logout():
    session.pop("user",None)
    session.pop("name",None)
    session.pop("logged_in",None)
    session.clear()
    return redirect(url_for("home"))

if __name__ == "__main__":
    app.run(debug=False,host="0.0.0.0")
